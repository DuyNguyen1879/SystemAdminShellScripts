#!/bin/sh
#
# Backup data to NFS storage by LVM snapshot on Xen Dom 0.
#

vg_name=$1
lv_name=$2


lv_dev_name="/dev/${vg_name}/${lv_name}"
lv_snapshot_name="${lv_name}-backup-snapshot"
lv_snapshot_dev_name="/dev/${vg_name}/${lv_snapshot_name}"
 
backup_dir=`echo $3 | sed -e 's|^/||' -e  's|/$||'`
 

nfs_server=$4 
nfs_export_dir=$5

mysql_server=$6
mysql_user=$7
mysql_passwd=$8

timestamp=`date +%s%N`
snapshot_mount_dir="/tmp/snapshot-${timestamp}"
nfs_mount_dir="/tmp/nfs-${timestamp}"

backup_src_dir="${snapshot_mount_dir}/${backup_dir}" 

tar_file_name="`date +%Y%m%d%H%M`.tar.gz"

# backupfile save to backup_task_name directory 
backup_task_name="${lv_name}-`echo ${backup_dir} | sed 's|/|-|g'`-`date +%Y%W`"

backup_dest_dir="${nfs_mount_dir}/${backup_task_name}"

snapshot_size_functor=0.1


Usage() {
    echo "Usage: "
    echo "  $0 vgname lvname backup_directory nfs_server nfs_export_directory [mysql_server mysql_user mysql_passwd]"
    echo "    vgname: The backup VG(Volumn Group) name"
    echo "    lvname: The backup LV(Logic Volumn) name"
    echo "    backup_directory: Backup directory on LV"
    echo "    nfs_server: NFS server address"
    echo "    nfs_export_directory: Backup dest directory"
    echo "    if backup mysql data, the following parameter would be assgin:"
    echo "      mysql_server: MySQL server address "
    echo "      mysql_user"
    echo "      mysql_password"

}

LogInfo() {
    logfile="/var/log/lvmbackup.log"
    echo "[`date +"%Y-%m-%d %H:%M:%S"`] $1:$2" >> $logfile
}


CreateSnapshot() {
    
    # snapshot size = lv size * functor 
    # BUT snapshot size must be smaller than vg free space
    # SO  if vg_free_space >  snapshot_size then  snapshot_size=vg_free_space
    #
    # Run ${LVDISPLAY} and vgs using same unit Mbyte
    lv_size=`/sbin/lvdisplay --unit m $lv_dev_name | grep "LV Size" | awk '{print $3}'`
    snapshot_size=`echo "${snapshot_size_functor}*${lv_size}" | bc | sed 's/\..*$//'`

    vg_free_space=`/sbin/vgs --unit m | grep $vg_name | awk '{print $7}' | sed 's/\..*$//'`
    if [ $snapshot_size -gt $vg_free_space  ] ; then
        echo "WARING:VG free space is less than snapshot required."
        snapshot_size=$vg_free_space
    fi
    if /sbin/lvcreate -L ${snapshot_size}m -s  -n $lv_snapshot_name $lv_dev_name
    then
        LogInfo "INFO" "Snapshot $lv_snapshot_dev_name is be created."
    else
        LogInfo "ERROR" "Create Snapshot $lv_snapshot_dev_name Fall."
        exit 1
    fi 
}

DeleteSnapshot() {
    if /sbin/lvremove -f $lv_snapshot_dev_name
    then
        LogInfo "INFO" "Snapshot $lv_snapshot_dev_name is be removed."
    else
        LogInfo "ERROR" "Can't remove snapshot."
    fi 
}

MountSnapshot() {
    mkdir $snapshot_mount_dir
    if mount $lv_snapshot_dev_name $snapshot_mount_dir
    then
        LogInfo "INFO" "Snapshot $lv_snapshot_dev_name is mounted on $snapshot_mount_dir."
    else
        LogInfo "ERROR" "Can't mount snapshot $lv_snapshot_dev_name on $snapshot_mount_dir."
        exit 1
    fi
}

UmountSnapshot() {
    if umount $snapshot_mount_dir
    then
        LogInfo "INFO" "Umounted $snapshot_mount_dir."
        rm -r $snapshot_mount_dir
    else
        LogInfo "ERROR" "Can't umount $snapshot_mount_dir."
    fi 
}

MountNFS() {
    mkdir $nfs_mount_dir
    if mount -t nfs ${nfs_server}:${nfs_export_dir} $nfs_mount_dir
    then
        LogInfo "INFO" "Mounted nfs ${nfs_server}:${nfs_export_dir} on $nfs_mount_dir "
    else
        LogInfo "ERROR" "Can't mount nfs ${nfs_server}:${nfs_export_dir} on $nfs_mount_dir."
        exit 1
    fi 
}

UmountNFS() {
    if umount $nfs_mount_dir
    then 
        LogInfo "INFO" "Umount ufs $nfs_mount_dir."
        rm -r $nfs_mount_dir
    else
        LogInfo "ERROR" "Can't umount ufs $nfs_mount_dir."
    fi 
}

UnlockMySQL() {
    if echo "UNLOCK TABLES;" | mysql -h $mysql_server -u $mysql_user -p$mysql_passwd
    then
        LogInfo "INFO" "unlock tables."
    else
        LogInfo "ERROR" "Can't unlock tables"
    fi 
}

FlushMySQL() {
    if echo " FLUSH TABLES WITH READ LOCK;" | mysql -h $mysql_server -u $mysql_user -p$mysql_passwd
    then
        LogInfo "INFO" "Flush tables."
    else
        Loginfo "ERROR" "Flush tables fall."
        UnlockMySQL
        exit 1
    fi
}


###################################################################
## Main process 
###################################################################

## Check parameter number  
if [ $# -ne 5 -a $# -ne 8 ] 
then
    Usage
    exit 1
fi

LogInfo "INFO" "Backup starting." 

## Check Snapshot exist
if /sbin/lvs | grep $vg_name | grep $lv_snapshot_name > /dev/null
then
    LogInfo "ERROR" "Snapshot $lv_snapshot_dev_name is exists."
    exit 1
fi 

## Check LV exist
if ! /sbin/lvs | grep $vg_name | grep $lv_name > /dev/null
then
    LogInfo "ERROR" "lv $lv_dev_name is not exists."
    exit 1
fi

## 8 parameter,mysql backup
if [ $# -eq 8 ] 
then
    FlushMySQL
fi 

CreateSnapshot

## 8 parameter,mysql backup
if [ $# -eq 8 ] 
then
    UnlockMySQL
fi 

MountSnapshot

if [ ! -d $backup_src_dir ]
then
    LogInfo "ERROR" "Backup directory $backup_src_dir is not exists."
    UmountSnapshot
    DeleteSnapshot
    exit 1
fi 

MountNFS

#Check Dest dir.if it's not exist,create it and tar will be full backup.
if [ ! -d $backup_dest_dir ]
then
    if mkdir $backup_dest_dir
    then
        LogInfo "INFO" "Backup directory (${backup_dest_dir}) is be created."
    else
        LogInfo "ERROR" "Can't create backup dest dir:${backup_dest_dir}"
        UmountNFS
        UmountSnapshot
        DeleteSnapshot
        exit 1
    fi 
fi 
LogInfo "INFO" "Start backup to ${tar_file_name}"

tar -g ${backup_dest_dir}/tar_hash -czvf  ${backup_dest_dir}/${tar_file_name}  ${backup_src_dir}

LogInfo "INFO" "${tar_file_name} created"


UmountNFS
UmountSnapshot
DeleteSnapshot
LogInfo "INFO" "Backup over."

